{"version":3,"sources":["components/MessagesBar.tsx","data/UsersData.ts","components/ChatFlow.tsx","models/enums/ChatType.ts","data/ChatFlowsData.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["MessagesBarSelector","props","useState","pages","selectedPage","setSelectedPage","prevSelectedPage","setPrevSelectedPage","pageBlocks","forEach","el","push","key","className","style","color","onClick","selectAction","title","MessagesBar","state","source","openAction","this","selectedPageObj","filter","page","pageLastMessages","lastMessages","chatKey","chatName","user","login","message","setState","Component","me","role","ChatFlowTitle","toUpperCase","ChatFlowMessages","messageBlocks","messages","justifyContent","width","display","deleteAction","ChatFlowTextBox","textMessage","setTextMessage","onChange","e","target","value","placeholder","type","disabled","length","sendAction","ChatFlow","ChatType","sendMessageAction","userInfo","newMessage","Math","random","lastMessage","undefined","bgColor","alignItems","fontSize","background","ChatsData","GROUP","members","PERSONAL","App","chatsData","setChatsData","selectedChatKey","setSelectedChatKey","updateNum","setUpdateNum","useEffect","localStorage","JSON","parse","history","useHistory","selectedChat","chat","personalChatsLastMessages","groupChatsLastMessages","messagesBarSource","path","chData","map","msEl","stringify","flexDirection","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0e146923.chunk.js","sourcesContent":["import React, { Component, useState } from 'react';\n\nimport '../styles/MessagesBar.css';\nimport IBarPage from '../models/IBarPage';\nimport IMessagesBar from '../models/IMessagesBar';\n\n\ninterface IMessagesBarSelectorProps {\n    pages: Array<IBarPage>,\n    selectedPage: string,\n    selectAction: Function\n}\n\ninterface IMessagesBarState {\n    source: IMessagesBar\n    selectedPage: string,\n    openAction: any\n}\n\ninterface IMessagesBarProps {\n    source: IMessagesBar,\n    openAction: any\n}\n\nclass MessagesBar extends Component<IMessagesBarProps, IMessagesBarState> {\n    constructor(props: IMessagesBarProps) {\n        super(props);\n        this.state = {\n            source: props.source,\n            selectedPage: props.source.pages[0].key,\n            openAction: props.openAction\n        }\n    }\n\n    static getDerivedStateFromProps(props: IMessagesBarProps, state: IMessagesBarState) {\n        return { ...props };\n    }\n\n    render() {\n        const { source, selectedPage, openAction } = this.state;\n\n        let selectedPageObj = source.pages.filter(page => page.key === selectedPage)[0];\n        let pageLastMessages: Array<JSX.Element> = [];\n        selectedPageObj.lastMessages.forEach(el => pageLastMessages.push(\n            <div key={el.key} onClick={() => openAction(el.chatKey)} className={'mb-message'}>\n                <div style={{ color: '#4f76a6' }}>{el.chatName}</div>\n                <div><span>{el.user.login}: </span><span> {el.message}</span></div>\n            </div>\n        ));\n\n        return (\n            <div className={'mb-wrapper'}>\n                <MessagesBarSelector\n                    selectedPage={selectedPage}\n                    selectAction={(key: string) => this.setState({ selectedPage: key })}\n                    pages={source.pages}\n                />\n                <div className={'mb-messages'}>\n                    {pageLastMessages}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction MessagesBarSelector(props: IMessagesBarSelectorProps) {\n    const [pages] = useState<Array<IBarPage>>(props.pages),\n        [selectedPage, setSelectedPage] = useState(props.selectedPage),\n        [prevSelectedPage, setPrevSelectedPage] = useState<string>('');\n    // [selectAction] = useState(props.selectAction)\n    // console.log(selectedPage);\n    if (selectedPage !== prevSelectedPage) {\n\n        setSelectedPage(props.selectedPage);\n        setPrevSelectedPage(props.selectedPage);\n    }\n\n\n    let pageBlocks: Array<JSX.Element> = [];\n    pages.forEach(el => pageBlocks.push(\n        <div\n            key={el.key}\n            className={'md-selector-title'}\n            style={{ color: selectedPage === el.key ? 'gray' : '#e5e5e5' }}\n            onClick={() => { setSelectedPage(el.key); props.selectAction(el.key) }}\n        >\n            {el.title}\n        </div>\n    ));\n\n    return (\n        <div className={'mb-selector-wrapper'}>\n            <div className={'mb-selector'}>\n                {pageBlocks}\n            </div>\n        </div>\n    );\n}\n\n\nexport default MessagesBar;","import IUser from \"../models/IUser\";\n\nexport let me: IUser = {\n    key: 'user_1',\n    login: 'frontender',\n    role: ''\n}\n\nexport const user: IUser = {\n    key: 'user_0',\n    login: 'alex1993',\n    role: ''\n}\n\nexport default user;","import React, { Component, useState } from 'react';\nimport IChat from './../models/IChat';\n\nimport '../styles/ChatFlow.css';\nimport IMessage from './../models/IMessage';\nimport IUser from '../models/IUser';\nimport { me } from '../data/UsersData';\n\ninterface IChatFlowProps {\n    source: IChat,\n    bgColor: string,\n    userInfo: IUser,\n    sendAction: any,\n    deleteAction: any\n}\n\ninterface IChatFlowState {\n    source: IChat,\n    bgColor: string,\n    textMessage: string,\n    userInfo: IUser,\n    sendAction: any,\n    deleteAction: any,\n    lastMessage?: IMessage\n}\n\nclass ChatFlow extends Component<IChatFlowProps, IChatFlowState> {\n    constructor(props: IChatFlowProps) {\n        super(props);\n\n        this.state = {\n            ...{\n                textMessage: '',\n                lastMessage: undefined\n            }, ...props\n        };\n\n    }\n\n    static getDerivedStateFromProps(props: IChatFlowProps, state: IChatFlowState) {\n        return { ...props };\n    }\n\n    public sendMessageAction = (message: string) => {\n        const { source, userInfo, sendAction } = this.state;\n        let newMessage: IMessage = {\n            key: `message_${Math.random() * 100}`,\n            user: userInfo,\n            message,\n            chatKey: source.key,\n            chatName: source.title\n        }\n        this.setState({ lastMessage: newMessage });\n        sendAction(newMessage);\n    }\n\n    render() {\n        const { source, bgColor, deleteAction } = this.state;\n        if (source === undefined) return (<div \n            style={{ \n                display: 'flex', \n                width: '100%', \n                justifyContent: 'center',\n                alignItems: 'center',\n                color: 'gray',\n                fontSize: '16pt'\n            }}>select a chat...</div>);\n\n        return (\n            <div style={{ background: bgColor }} className={'chat-flow-wrapper'}>\n                <ChatFlowTitle title={source.title} />\n                <ChatFlowMessages deleteAction={deleteAction} messages={source.messages} />\n                <ChatFlowTextBox sendAction={this.sendMessageAction} />\n            </div>\n        );\n    }\n}\n\ninterface IChatFlowTitleProps {\n    title: string\n}\n\nfunction ChatFlowTitle(props: IChatFlowTitleProps) {\n    return (\n        <div className={'chat-title-block'}>{props.title.toUpperCase()}</div>\n    );\n}\n\ninterface IChatFlowMessagesProps {\n    messages: Array<IMessage>,\n    deleteAction: any\n}\n\nfunction ChatFlowMessages(props: IChatFlowMessagesProps) {\n    // const [messages] = useState<Array<IMessage>>(props.messages);\n\n    let messageBlocks: Array<JSX.Element> = [];\n    props.messages.forEach(el => messageBlocks.push(\n        <div key={el.key} style={{ justifyContent: el.user.key === me.key ? 'flex-end' : 'flex-start' }} className={'chat-message-block'}>\n            <div style={{ width: 'auto' }} className={'chat-message'}>\n                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                    {el.user.login}\n                    {el.user.key === me.key && <span onClick={() => props.deleteAction(el)} className={'message-delete-button'}>удалить</span>}\n                </div>\n                <div>{el.message}</div>\n            </div>\n        </div>\n    ));\n\n    return (\n        <div className={'chat-flow-messages-wrapper'}>\n            {messageBlocks}\n        </div>\n    );\n}\n\ninterface IChatFlowTextBoxProps {\n    sendAction: any\n}\n\nfunction ChatFlowTextBox(props: IChatFlowTextBoxProps) {\n    const [textMessage, setTextMessage] = useState('');\n\n    let sendAction = () => {\n        setTextMessage(''); \n        props.sendAction(textMessage);\n    }\n\n    return (\n        <div className={'cf-text-box'}>\n            <input onChange={(e) => setTextMessage(e.target.value)} className={'input-text-box'} placeholder={'Write your message...'} type=\"text\" value={textMessage} />\n            <div className={'input-send-button-block'}>\n                <input disabled={textMessage.length === 0} onClick={sendAction} className={'input-send-button'} type=\"button\" value=\"отправить\" />\n            </div>\n        </div>\n    );\n}\n\nexport default ChatFlow;","enum ChatType {\n    GROUP = 'group',\n    PERSONAL = 'personal'\n}\n\nexport default ChatType;","import IChat from './../models/IChat';\nimport user, { me } from './UsersData';\nimport ChatType from '../models/enums/ChatType';\n\nexport const ChatsData: Array<IChat> = [\n    {\n        key: 'required_work_chat',\n        type: ChatType.GROUP,\n        title: 'General Work Chat',\n        members: [me, user],\n        messages: [\n            {\n                key: 'message_12',\n                user: user,\n                message: 'Hello!',\n                chatKey: 'required_work_chat',\n                chatName: 'General Work Chat'\n            },\n            {\n                key: 'message_12441',\n                user: user,\n                message: 'How is your task?',\n                chatKey: 'required_work_chat',\n                chatName: 'General Work Chat'\n            },\n        ]\n    },\n    {\n        key: 'flood_chat',\n        type: ChatType.GROUP,\n        title: 'Flood Chat:)',\n        members: [me, user],\n        messages: [\n            {\n                key: 'message_12515',\n                user: user,\n                message: 'Hi!',\n                chatKey: 'flood_chat',\n                chatName: 'Flood Chat:)'\n            },\n            {\n                key: 'message_16626',\n                user: user,\n                message: 'How do you do?',\n                chatKey: 'flood_chat',\n                chatName: 'Flood Chat:)'\n            },\n        ]\n    },\n    {\n        key: `${user.key}_${me.key}`,\n        type: ChatType.PERSONAL,\n        title: user.login,\n        members: [],\n        messages: [\n            {\n                key: 'message_1268900',\n                user: user,\n                message: 'Whats up?',\n                chatName: user.login,\n                chatKey: `${user.key}_${me.key}`\n            }\n        ]\n\n    }\n];\n\n// export const FloodChatData: IChat = ;\n","import React, { useState, useEffect } from 'react';\nimport './styles/App.css';\nimport MessagesBar from './components/MessagesBar';\nimport ChatFlow from './components/ChatFlow';\nimport { ChatsData } from './data/ChatFlowsData';\nimport {\n  Switch,\n  Route,\n  useHistory,\n} from \"react-router-dom\";\nimport { me } from './data/UsersData';\nimport IMessage from './models/IMessage';\nimport ChatType from './models/enums/ChatType';\nimport IMessagesBar from './models/IMessagesBar';\n\nfunction App() {\n  const [chatsData, setChatsData] = useState(ChatsData);\n  const [selectedChatKey, setSelectedChatKey] = useState('');\n  const [updateNum, setUpdateNum] = useState(0); // The way is in react doc (like forceUpdate method)\n\n  useEffect(() => {\n    // Обновляем заголовок документа с помощью API браузера\n    // document.title = `хуй`;\n\n    if (localStorage.chatsData !== undefined) {\n      setChatsData(JSON.parse(localStorage.chatsData));\n    }\n  }, []);\n\n\n  let history = useHistory();\n\n  let sendAction = (message: IMessage) => {\n    let chData = chatsData;\n    chData.map(chat => {\n      if (chat.key === message.chatKey) {\n        chat.messages.push(message);\n        return chat;\n      }\n      return chat;\n    });\n\n    setChatsData(chData);\n    setUpdateNum(updateNum + 1);\n    localStorage.chatsData = JSON.stringify(chData);\n  }\n\n  let deleteAction = (message: IMessage) => {\n    let chData = chatsData;\n    chData.map(chat => {\n      if (chat.key === message.chatKey) {\n        chat.messages = chat.messages.filter(msEl => msEl.key !== message.key);\n        return chat;\n      }\n      return chat;\n    });\n\n    setChatsData(chData);\n    setUpdateNum(updateNum + 1);\n    localStorage.chatsData = JSON.stringify(chData);\n  }\n\n  let openChat = (chatKey: string) => {\n    setSelectedChatKey(chatKey);\n  }\n\n  let selectedChat = chatsData.filter(chat => chat.key === selectedChatKey)[0];\n\n\n  let personalChatsLastMessages: Array<IMessage> = [],\n  groupChatsLastMessages: Array<IMessage> = [];\n\n  chatsData.filter(chat => chat.type === ChatType.PERSONAL).forEach(el => personalChatsLastMessages.push(el.messages[el.messages.length - 1]));\n  chatsData.filter(chat => chat.type === ChatType.GROUP).forEach(el => groupChatsLastMessages.push(el.messages[el.messages.length - 1]));\n  \n  let messagesBarSource: IMessagesBar = {\n    pages: [\n      {\n        key: 'selector_chats_groups',\n        title: 'groups',\n        lastMessages: groupChatsLastMessages\n      },\n      {\n        key: 'selector_chats_personal',\n        title: 'personal',\n        lastMessages: personalChatsLastMessages\n      },\n    ]\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/board\">\n        <div className=\"App\">\n          <div className={'required-chat-wrapper'}>\n            <ChatFlow deleteAction={deleteAction} sendAction={sendAction} userInfo={me} source={selectedChat} bgColor={'#4f76a6'} />\n          </div>\n          <div className={'app-mb-wrapper'}>\n            <MessagesBar openAction={openChat} source={messagesBarSource} />\n          </div>\n          {/* <div className={'not-required-chat-wrapper'}>\n            <ChatFlow sendAction={sendAction} userInfo={me} source={selectedChat} bgColor={'#4f76a6'} />\n          </div> */}\n        </div>\n      </Route>\n      <Route path=\"/\">\n        <div className={'login-wrapper'}>\n          <div className={'login'}>\n            <div style={{ display: 'flex', flexDirection: 'column', }}>\n              <input type=\"text\" value={'frontender'} />\n              <input type=\"password\" value={'qwerty123'} />\n            </div>\n            <button onClick={() => history.push(\"/board\")}>login</button>\n          </div>\n        </div>\n      </Route>\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}